##############################################################
# this is a tester file, you are not required to submit this
# file in the final solution, please ensure your submitted q1 file
# can run without any issues with this tester file to avoid any penalty
##############################################################
from time import time
from q1 import largest_number

num_test_cases_matched = 0
test_cases = [[21, 2], 
              [9, 4, 6, 1, 9], 
              [23, 39, 92], 
              [67, 694],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
              [10, 9, 8, 7, 6, 5, 4, 3, 2, 1],
              [2, 21, 23],
              [330, 92, 443, 450, 986, 912, 215, 694, 998, 803, 603, 826, 615, 129, 902, 928, 735, 505, 6, 504], 
              [525, 835, 940, 436, 805, 215, 509, 417, 122, 920, 548, 946, 747, 575, 625, 459, 617, 11, 974, 504, 764, 954, 212, 849, 408, 640, 541, 788, 302, 965, 970, 178, 552, 603, 975, 77, 653, 666, 949, 361, 549, 703, 91, 842, 223, 869, 8, 785, 986, 952, 341, 783, 832, 243, 708, 310, 164, 730, 125, 883, 958, 515, 697, 290, 811, 680, 317, 70, 683, 389, 101, 813, 52, 14, 613, 607, 973, 196, 211, 268, 652, 665, 576, 604, 344, 337, 362, 65, 188, 798, 896, 983, 715, 446, 687, 893, 58, 454, 400, 145],
              [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000],  
              ]
expected_result = [221, 
                   99641,
                   923923, 
                   69467,
                   98765432110, 
                   98765432110,
                   23221,
                   998986929289129028268037356946615603505504450443330215129,
                   98698397597497397096595895495294994694092091896893888386984984283583281381180579878878578377764747730715708707036976876836806666656565365264062561761360760460358576575552549548541525525155095044594544464364174084003893623613443413373173103022902682432232152122111961881781641451412512211101,9999999989979969959949939929919909899898898798698598498398298198097997978977976975974973972971970969969689679669659649639629619609599595895795695595495395295195094994948947946945944943942941940939939389379369359349339329319309299292892792692592492392292192091991918917916915914913912911910909909089079069059049039029019008998989889789689589489389289189088988888888788688588488388288188087987887877876875874873872871870869868868678668658648638628618608598588585785685585485385285185084984884847846845844843842841840839838838378368358348338328318308298288282782682582482382282182081981881817816815814813812811810809808808078068058048038028018007997987979779679579479379279179078978878787786785784783782781780779778777777776775774773772771770769768767767667657647637627617607597587577575675575475375275175074974874774746745744743742741740739738737737367357347337327317307297287277272672572472372272172071971871771716715714713712711710709708707707067057047037027017006996986976969669569469369269169068968868768686685684683682681680679678677676766756746736726716706696686676666666656646636626616606596586576566565565465365265165064964864764664645644643642641640639638637636636356346336326316306296286276266262562462362262162061961861761661615614613612611610609608607606606056046036026016005995985975965959559459359259159058958858758658585584583582581580579578577576575755745735725715705695685675665656556456356256156055955855755655555555455355255155054954854754654554544543542541540539538537536535535345335325315305295285275265255252452352252152051951851751651551514513512511510509508507506505505045035025015004994984974964954949449349249149048948848748648548484483482481480479478477476475474744734724714704694684674664654646446346246146045945845745645545454453452451450449448447446445444444443442441440439438437436435434434334324314304294284274264254244242342242142041941841741641541441413412411410409408407406405404404034024014003993983973963953943939339239139038938838738638538438383382381380379378377376375374373733723713703693683673663653643636336236136035935835735635535435353352351350349348347346345344343433423413403393383373363353343333333323313303293283273263253243233232232132031931831731631531431331312311310309308307306305304303303023013002992982972962952942932929229129028928828728628528428328282281280279278277276275274273272722712702692682672662652642632626226126025925825725625525425325252251250249248247246245244243242422412402392382372362352342332323223123022922822722622522422322222222122021921821721621521421321221211210209208207206205204203202202012001991981971961951941931921919119018918818718618518418318218181180179178177176175174173172171711701691681671661651641631621616116015915815715615515415315215151150149148147146145144143142141411401391381371361351341331321313113012912812712612512412312212121120119118117116115114113112111111110109108107106105104103102101101001000
                   ]
                  
num_test_cases = len(test_cases)

for i in range(num_test_cases):
    try:
        start_time = time()
        result = largest_number(test_cases[i])
        time_taken = time() - start_time
        print("Test Case " + str(i+1) + " : " + str(len(test_cases[i])) + " elements")
        print("Execution Time : " + str(round(time_taken,2)) + " seconds")
        print("Expected Result: " + str(expected_result[i]))
        print("         Result: " + str(result))
        if result == expected_result[i]:
            print ('Result : Matched expected result')
            num_test_cases_matched += 1
        else:
            print ('Result : Does not matched expected result')
         
        print('--------------------------------------------------------------------------')

    except Exception as e:
            print('Result  : Failed - Exception ' + str(e))

print ("Number of test cases : " + str(num_test_cases))
print ("Number of test cases with matched outcome : " + str(num_test_cases_matched))
print('--------------------------------------------------------------------------')